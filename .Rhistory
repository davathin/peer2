View(GDP)
GDP<-read.csv("getdata-data-GDP.csv",skip=4,header=TRUE)
GDP<-names(c("Ranking","X2","Economy","GDP","X4","X5","X6","X7","X8"))
View(GDP)
GDP<-read.csv("getdata-data-GDP.csv",skip=4,header=TRUE)
View(GDP)
?names
names(GDP)<-c("Ranking","X2","Economy","GDP","X4","X5","X6","X7","X8")
View(GDP)
names(GDP)<-c("",Ranking","X2","Economy","GDP","X4","X5","X6","X7","X8")
names(GDP)<-c("X1",Ranking","X2","Economy","GDP","X4","X5","X6","X7","X8")
GDP<-read.csv("getdata-data-GDP.csv",skip=4,header=TRUE)
names(GDP)<-c("X1",Ranking","X2","Economy","GDP","X4","X5","X6","X7","X8")
names(GDP)<-c("X1","Ranking","X2","Economy","GDP","X4","X5","X6","X7","X8")
View(GDP)
names(GDP)<-c("Country","Ranking","X2","Economy","GDP","X4","X5","X6","X7","X8")
View(GDP)
GDP<-select(GDP,Country,Ranking,Economy,GDP)
View(GDP)
View(EDSTATS)
name(GDP)<-c("CountryCode","Ranking",Economy,GDP)
name(GDP)<-c("CountryCode","Ranking","Economy","GDP")
names(GDP)<-c("CountryCode","Ranking","Economy","GDP")
View(GDP)
View(EDSTATS)
CC_match<c(GDP$CountryCode,EDSTATS$CountryCode)
CC_match<-c(GDP$CountryCode,EDSTATS$CountryCode)
View(CC_match)
GDP$CountryCode
CC_match<-merge(GDP,EDSTATS,by.x="CountryCode",all=TRUE)
View(CC_match)
?merge
class(GDP)
class(EDSTATS)
CC_match<-merge(GDP,EDSTATS,by="CountryCode",all=TRUE)
View(CC_match)
CC_match<-arrange(CC_match,CountryCode)
View(CC_match)
CC_match<-arrange(CC_match,Ranking)
View(CC_match)
GDP<-GDP[1:231,]
View(GDP)
GDP<-na.omit(GDP)
View(GDP)
GDP[GDP==""] <- NA
View(GDP)
?na.omit
GDP[GDP==".."] <- NA
View(GDP)
EDSTATS[EDSTATS==""] <- NA
EDSTATS[EDSTATS==".."] <- NA
View(EDSTATS)
CC_match<-merge(GDP,EDSTATS,by="CountryCode")
View(CC_match)
?merge
CC_match<-merge(GDP,EDSTATS,by="CountryCode",all=TRUE)
View(CC_match)
CC_match<-arrange(CC_match,GDP)
View(CC_match)
class(CC_match$GDP)
transform(CC_match, GDP=as.numeric(GDP))
CC_match<-transform(CC_match, GDP=as.numeric(GDP))
View(CC_match)
CC_match<-merge(GDP,EDSTATS,by="CountryCode",all=TRUE)
View(CC_match)
class(CC_match$Ranking)
CC_match<-transform(CC_match, Ranking=as.numeric(Ranking))
View(CC_match)
CC_match<-arrange(CC_match,Ranking)
View(CC_match)
CC_match<-arrange(CC_match,desc(Ranking)
CC_match<-arrange(CC_match,desc(Ranking))
View(CC_match)
CC_match<-merge(GDP,EDSTATS,by="CountryCode")
CC_match<-transform(CC_match, Ranking=as.numeric(Ranking))
CC_match<-arrange(CC_match,desc(Ranking))
View(CC_match)
GDP<-arrange(GDP,CountryCode)
EDSTATS<-arrange(EDSTATS,CountryCode)
View(GDP)
View(EDSTATS)
GDP<-GDP[1:228,]
View(GDP)
CC_match<-merge(GDP,EDSTATS,by.x="CountryCode")
View(CC_match)
CC_match<-merge(GDP,EDSTATS,by.x="CountryCode",all.x=TRUE)
View(CC_match)
CC_match<-arrange(CC_match,desc(Ranking))
View(CC_match)
CC_match<-transform(CC_match, Ranking=as.numeric(Ranking))
class(CC_match$Ranking)
CC_match<-arrange(CC_match,desc(Ranking))
View(CC_match)
GDP<-arrange(GDP,Ranking)
View(Ranking)
View(GDP)
GDP<-transform(GDP, Ranking=as.numeric(Ranking))
View(GDP)
class(GDP$GDP)
GDP<-read.csv("getdata-data-GDP.csv")
View(GDP)
class(GDP$Ranking)
CC_match<-merge(GDP,EDSTATS,by="CountryCode",all=TRUE)
CC_match<-arrange(CC_match,desc(Ranking))
View(CC_match)
CC_match<-arrange(CC_match,Income.Group)
View(CC_match)
CC_match<_group_by(CC_match,Income.Group)
CC_match<-group_by(CC_match,Income.Group)
View(CC_match)
CC_match
mean(CC_match)
mean(CC_match$Income.Group)
summary(CC_match)
summarize(CC_match)
summarize(CC_match,mean(GDP))
summarize(CC_match,mean(GDP,na.rm=TRUE))
summarize(CC_match,mean(Ranking,na.rm=TRUE))
?quantile
qunatile(CC_match,c(.2,.4,.6,.8,1))
quuatile(CC_match,c(.2,.4,.6,.8,1))
quantile(CC_match,c(.2,.4,.6,.8,1))
quantile(CC_match,c(.2,.4,.6,.8,1),na.rm=TRUE)
quantile(CC_match$Ranking,c(.2,.4,.6,.8,1),na.rm=TRUE)
CC_match<-mutate(CC_match,quant_ran=ifelse(Ranking<38.8,1,ifelse(Ranking<76.6 & Ranking>=38.8,2,ifelse(Ranking<114.4 & Ranking>=76.6,3,ifelse(Ranking<152.2 & Ranking>=114.4,4,ifelse(Ranking<190 & Ranking>=152.2,5,0))))))
View(CC_match)
CC_match<-arrance(CC_match,Ranking)
CC_match<-arrange(CC_match,Ranking)
View(CC_match)
class(CC_match$Ranking)
CC_match<-arrange(CC_match,Ranking)
View(CC_match)
write.csv(CC_match,file="GDP_test.csv")
CC_match<-merge(GDP,EDSTATS,by="CountryCode",all=TRUE)
CC_match<-arrange(CC_match,Ranking)
View(CC_match)
CC_match<-arrange(CC_match,desc(Ranking)
CC_match<-arrange(CC_match,desc(Ranking))
View(CC_match)
list.files()
ss06hid<-csv.read("getdata-data-ss06hid.csv")
ss06hid<-read.csv("getdata-data-ss06hid.csv")
head(ss06hid,1)
splitnames=strsplit(names(ss06hid),"wgtp")
splitnames[[123]]
GDP<-read.csv("getdata-data-GDP.csv")
head(GDP,1)
head(GDP,5)
GDP<-read.csv("getdata-data-GDP.csv")
head(GDP,5)
?sub
sub(\,,"",GDP$GDP)
sub(",","",GDP$GDP)
GDP$GDP
GDP<-sub(",","",GDP$GDP)
GDP
GDP<-read.csv("getdata-data-GDP.csv")
GDP<-read.csv("getdata-data-GDP.csv")
GDP<-sub(",","",GDP$GDP)
DP
GDP
mean(GDP)
GDP<-read.csv("getdata-data-GDP.csv")
GDP<-sub(",","",GDP$GDP)
GDP
mean(GDP[1:190])
mean(GDP[1:190],)
class9GDP
class(GDP)
GDP<-as.numeric(GDP)
GDP
GDP<-read.csv("getdata-data-GDP.csv")
names(GDP)
head(GDP,5)
grep("^United",GDP)
grep("^United",GDP$Economy)
GDP<-read.csv("getdata-data-GDP (1).csv")
Economy<-read.csv("getdata-data-EDSTATS_Country.csv")
combine<-merge(GDP,Economy,Abbreviation)
combine<-merge(GDP,Economy,by=Abbreviation)
combine<-merge(GDP,Economy,by(Abbreviation))
?merge
combine<-merge(GDP,Economy,by="Abbreviation")
combine
head(combine,1)
install.package("quantmod")
package.install("quantmod")
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes,5)
sampleTimes
head(amzn)
grep("2012",sampleTimes)
count(grep("2012",sampleTimes))
counter<-grep("2012",sampleTimes)
length(counter)
library(lubridate)
st_mod<-weekdays(sampleTimes)
st_mod
counter<-grep("Monday",sampleTimes)
length(counter)
counter<-grep(""Monday""",sampleTimes)
counter<-grep("\"Monday\""",sampleTimes)
counter<-grep("\"Monday\"",sampleTimes)
length(counter)
counter<-grep(Monday,sampleTimes)
sampleTimes
counter<-grep("Monday",st_mod)
length(counter)
write.csv(sampleTimes,file="time_test.csv")
list.files()
mspc<-read.csv("subset_5_lot5.csv")
head(mspc,0)
names(MSPC)
names(mspc)
View(mspc$EDTA_ConcAvg_ug_g)
mean(mspc$EDTA_ConcAvg_ug_g)
unique(mspc$EDTA_ConcAvg_ug_g)
unique(mspc$KG_PRODUCED)
unique(mspc$QuantIn2)
mydata<mspc$QuantIn2
mydata<-mspc$QuantIn2
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
nrow(mydata)
mydata
class(mydata)
ncol(mydata)
mydata<-vector(mydata)
mydata<-data.frame(mydata)
nrow(mydata)
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-Means Cluster Analysis
fit <- kmeans(mydata, 5) # 5 cluster solution
# get cluster means
aggregate(mydata,by=list(fit$cluster),FUN=mean)
# append cluster assignment
mydata <- data.frame(mydata, fit$cluster)
plot(mydata)
# K-Means Cluster Analysis
fit <- kmeans(mydata, 5) # 5 cluster solution
?kmeans
length(mydata)
mydata<mspc$QuantIn2
mydata<-mspc$QuantIn2
mydata<-data.frame(mydata)
density(mydata)
class(mydata)
class(as.numeric(mydata))
head(mydata)
class(mydata)
mydata<-as.numeric(mydata)
mydata<-as.numeric(mspc$QuantIn2)
density(mydata)
plot(mydata)
plot(density(mydata))
hist(desntiy(mydata))
hist(density(mydata))
hist(mydata
hist(mydata)
clear
xyplot(y~x|data=epc)
xyplot(y~x|data="epc"")
xyplot(y~x|data="epc"")xyplot
xyplot
xyplot()
install.packages(c("lattice", "gridBase"))
?rand
x<-rnorm(100)
y<-rnorm(100)
xyplot(y~x)
?xyplot
library(lattice)
xyplot(y~x)
class(xyplot(y~x))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
Diet
BodyWeight$Diet
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
plot(p)
?par
?print.trellis
?spolom
?splom
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(gg2plot)
install.packages("ggplot2")
library(gg2plot)
library(gg2plot)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?qplot
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
install.packages("minqa")
?minqa
??minqa
setwd("repdata//peer2")
list.files()
unzip(zipfile="repdata-data-StormData.csv.bz2")
stormData<-read.csv("repdata-data-StormData.csv.bz2")
View(stormData)
stormFatalities<-aggregate(FATALITIES~EVTYPE, data=stormData)
stormFatalities<-aggregate(FATALITIES~EVTYPE, data=stormData, FUN=sum)
View(stormFatalities)
library(plyr)
?mutate
stormData<-mutate(stormData,FAT_INJ_TOT=FATALITIES+INJURIES)
View(stormData)
stormFatalities<-aggregate(FAT_INJ_TOT~EVTYPE, data=stormData, FUN=sum)
stormFatalities<-sort(stormFatalities,FAT_INJ_TOT)
?sort
?arrange
stormFatalities<-arrange(stormFatalities,FAT_INJ_TOT)
View(stormFatalities)
stormFatalities<-arrange(stormFatalities,-FAT_INJ_TOT)
View(stormFatalities)
row_sub = apply(stormFatalities, 1, function(row) all(row !=0 ))
stormFatalities[row_sub,]
stormFatalities<-stormFatalities[row_sub,]
View(stormFatalities)
nrows(stormFatalities)
nrow(stormFatalities)
nrow(stormFatalities)*.1
round(nrow(stormFatalities)*.1)
round(nrow(stormFatalities)*.01)
stormFatalities<-stormFatalities[1:round(nrow(stormFatalities)*.01),]
View(stormFatalities)
hist(stormFatalities)
line(stormFatalities)
qplot(stormFatalities)
library(ggplot2)
qplot(stormFatalities)
class(stormFatalities)
class(stormFatalities$FAT_INJ_TOT)
hist(stormFatalities$FAT_INJ_TOT)
View(stormFatalities$FAT_INJ_TOT)
barchart(stormFatalities)
barplot(stormFatalities)
stormFatalitiesMat<-as.matrix(stormFatalities)
barplot(stormFatalities)
barplot(stormFatalitiesMat)
barplot(stormFatalitiesMat)
counts <- table(mtcars$gear)
counts
transpose(stormFatalities)
t(stormFatalities)
barplot(t(stormFatalitiesMat)
barplot(t(stormFatalitiesMat))
c <- ggplot(stormFatalities, aes(factor(FAT_INJ_TOT)))
c+geom_bar()
c <- ggplot(stormFatalities, aes(FAT_INJ_TOT))
view(mtscars)
View(mtscars)
library(mtscars)
mtscars
data(mtscars)
data(mtcars)
mtcars
factor(mtcars$cyl)
stormFatalities
class(mtcars)
some.data <- rnorm(10, 4, 1.5)
some.data()
some.data
t(stormFatalities)
stormFatalities
c <- ggplot(stormFatalities, aes(t(stormFatalities$FAT_INJ_TOT))
c <- ggplot(stormFatalities, aes(t(stormFatalities$FAT_INJ_TOT)))
c+geom_bar()
t(stormFatalities$FAT_INJ_TOT)
c <- ggplot(t(stormFatalities$FAT_INJ_TOT))
c <- ggplot(stormFatalities$FAT_INJ_TOT)
c <- ggplot(stormFatalities)
c
c+geom_bar()
c <- ggplot(as.factor(stormFatalities$FAT_INJ_TOT)
c <- ggplot(as.factor(stormFatalities$FAT_INJ_TOT))
qplot(factor(FAT_INJ_TOT), data=stormFatalities, geom="bar")
mtscars
mtcars
class(mtcars)
class(mtcars$cyl)
qplot(factor(cyl), data=mtcars, geom="bar")
factor(cyl)
factor(mtcars$cyl)
factor(stormFatalities$FAT_INJ_TOT)
qplot(factor(FAT_INJ_TOT), data=stormFatalities, geom="bar")
qplot(factor(FAT_INJ_TOT), data=stormFatalities, geom="bar", stat="identity")
ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT)) + geom_bar(stat = "identity")
View(stormFatalities)
+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab="Disaster Type"
ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("Disaster Type") +ylab("Total number of fatalities and injuries")
ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("Disaster Type") +ylab("Total fatalities and injuries")
ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("Disaster Type") +ylab("Total fatalities and injuries") + main("Top 1% fatalities and injuries by disaster type")
ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("Disaster Type") +ylab("Total fatalities and injuries") + ggtitle("Top 1% fatalities and injuries by disaster type")
ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab("Disaster Type") +ylab("Total fatalities and injuries") + ggtitle("Top 1% fatalities and injuries by disaster type")
ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 30, hjust = 1)) + xlab("Disaster Type") +ylab("Total fatalities and injuries") + ggtitle("Top 1% fatalities and injuries by disaster type")
ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT))
+ geom_bar(stat = "identity")
+ theme(axis.text.x = element_text(angle = 30, hjust = 1))
+ xlab("Disaster Type") +ylab("Total fatalities and injuries")
+ ggtitle("Top 1% fatalities and injuries by disaster type")
fatalitybar<-ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT))
fatalitybar  + geom_bar(stat = "identity")
+ theme(axis.text.x = element_text(angle = 30, hjust = 1))
+ xlab("Disaster Type") +ylab("Total fatalities and injuries")
+ ggtitle("Top 1% fatalities and injuries by disaster type")
fatalitybar
fatalitybar<-ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT))
fatalitybar
fatalitybar  + geom_bar(stat = "identity")
fatalitybar<-ggplot(stormFatalities, aes(x = factor(EVTYPE), y = FAT_INJ_TOT))
fatalitybar  + geom_bar(stat = "identity")
+ theme(axis.text.x = element_text(angle = 30, hjust = 1))
?sort
sort(stormFatalities)
sort(stormFatalities,-stormFatalities$FAT_INJ_TOT)
?arrange
sort(stormFatalities,-FAT_INJ_TOT)
sort(stormFatalities,-stormFatalities$FAT_INJ_TOT)
arrange(stormFatalities,-FAT_INJ_TOT)
stormFatalities<-aggregate(FAT_INJ_TOT~EVTYPE, data=stormData, FUN=sum)
?mutate_if
stormData<-mutate(stormData,TOTALPROP=ifelse(PROPDMGEXP=="K"),PROPDMG*1000,ifelse(PROPDMGEXP=="M"),PROPDMG*1000000,ifelse(PROPDMGEXP=="B"),PROPDMG*1000000000,NA)
stormData<-mutate(stormData,TOTALPROP=ifelse(PROPDMGEXP=="K"),PROPDMG*1000,ifelse(PROPDMGEXP=="M"),PROPDMG*1000000,ifelse(PROPDMGEXP=="B"),PROPDMG*1000000000,NA,NA)
?ifelse
stormData<-mutate(stormData,TOTALPROP=ifelse(PROPDMGEXP=="K",PROPDMG*1000,ifelse(PROPDMGEXP=="M"),PROPDMG*1000000,ifelse(PROPDMGEXP=="B",PROPDMG*1000000000,NA,NA)))
stormData<-mutate(stormData,TOTALPROP=ifelse(PROPDMGEXP=="K",PROPDMG*1000,ifelse(PROPDMGEXP=="M"),PROPDMG*1000000,ifelse(PROPDMGEXP=="B",PROPDMG*1000000000,NA)))
stormData<-mutate(stormData,TOTALPROP=ifelse(PROPDMGEXP=="K",PROPDMG*1000,ifelse(PROPDMGEXP=="M",PROPDMG*1000000,ifelse(PROPDMGEXP=="B",PROPDMG*1000000000,NA,NA))))
stormData<-mutate(stormData,TOTALPROP=ifelse(PROPDMGEXP=="K",PROPDMG*1000,ifelse(PROPDMGEXP=="M",PROPDMG*1000000,ifelse(PROPDMGEXP=="B",PROPDMG*1000000000,NA))))
View(stormData)
View(stormData)
stormData<-mutate(stormData,TOTALPROP=ifelse(PROPDMGEXP=="K",PROPDMG*1000,ifelse(PROPDMGEXP=="M",PROPDMG*1000000,ifelse(PROPDMGEXP=="B",PROPDMG*1000000000,0))))
View(stormData)
stormData<-mutate(stormData,TOTALCROP=ifelse(CROPDMGEXP=="K",CROPDMG*1000,ifelse(CROPDMGEXP=="M",CROPDMG*1000000,ifelse(CROPDMGEXP=="B",CROPDMG*1000000000,0))))
View(stormData)
View(stormData)
stormData<-mutate(stormData,TOTALCOST=TOTALPROP+TOTALCROP)
View(stormData)
stormCost<-arrange(stormCost,-TOTALCOST)
stormCost<-stormCost[1:round(nrow(stormCost)*.01),]
stormCost<-arrange(stormData,-TOTALCOST)
stormCost<-stormCost[1:round(nrow(stormCost)*.01),]
View(stormCost)
stormCost<-arrange(stormData,-TOTALCOST)
stormCost<-stormData[1:round(nrow(stormData)*.01),]
View(stormCost)
stormData<-mutate(stormData,TOTALPROP=ifelse(PROPDMGEXP=="K",PROPDMG*1000,ifelse(PROPDMGEXP=="M",PROPDMG*1000000,ifelse(PROPDMGEXP=="B",PROPDMG*1000000000,0))))
stormData<-mutate(stormData,TOTALCROP=ifelse(CROPDMGEXP=="K",CROPDMG*1000,ifelse(CROPDMGEXP=="M",CROPDMG*1000000,ifelse(CROPDMGEXP=="B",CROPDMG*1000000000,0))))
stormData<-mutate(stormData,TOTALCOST=TOTALPROP+TOTALCROP)
stormCost<-aggregate(TOTALCOST~EVTYPE, data=stormData, FUN=sum)
stormCost<-arrange(stormData,-TOTALCOST)
stormCost<-stormCost[1:round(nrow(stormCost)*.01),]
stormData<-mutate(stormData,TOTALPROP=ifelse(PROPDMGEXP=="K",PROPDMG*1000,ifelse(PROPDMGEXP=="M",PROPDMG*1000000,ifelse(PROPDMGEXP=="B",PROPDMG*1000000000,0))))
stormData<-mutate(stormData,TOTALCROP=ifelse(CROPDMGEXP=="K",CROPDMG*1000,ifelse(CROPDMGEXP=="M",CROPDMG*1000000,ifelse(CROPDMGEXP=="B",CROPDMG*1000000000,0))))
stormData<-mutate(stormData,TOTALCOST=TOTALPROP+TOTALCROP)
stormCost<-aggregate(TOTALCOST~EVTYPE, data=stormData, FUN=sum)
stormCost<-arrange(stormCost,-TOTALCOST)
stormCost<-stormCost[1:round(nrow(stormCost)*.01),]
View(stormCost)
?round
stormCost<-mutate(stormCost,TOTALCOST=round(TOTALCOST/1000000000,digits=2)
stormCost<-mutate(stormCost,TOTALCOST=round(TOTALCOST/1000000000,digits=2))
View(stormCost)
breadth_data <- transform(stormCost, EVTYPE = reorder(EVTYPE, COST))
stormCost <- transform(stormCost, EVTYPE = reorder(EVTYPE, TOTALCOST))
ggplot(stormCost, aes(x = factor(EVTYPE), y = TOTALCOST)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
xlab("Disaster Type") +
ylab("Total cost in billions of dollars") +
ggtitle("Total property and crop damage by disaster type")
stormCost <- transform(stormCost, EVTYPE = reorder(EVTYPE, order(TOTALCOST, decreasing=TRUE)))
ggplot(stormCost, aes(x = factor(EVTYPE), y = TOTALCOST)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
xlab("Disaster Type") +
ylab("Total cost in billions of dollars") +
ggtitle("Total property and crop damage by disaster type")
